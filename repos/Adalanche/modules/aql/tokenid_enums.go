// Code generated by "enumer -type=TokenID -output tokenid_enums.go"; DO NOT EDIT.

package aql

import (
	"fmt"
	"strings"
)

const _TokenIDName = "InvalidStarSlashExclamationDotDotdotCommaColonEqualsTildeLessThanLessThanEqualsGreaterThanGreaterThanEqualsAndOrXorNotBinaryAndBinaryOrBinaryNotLParanRParanLBracketRBracketLBraceRBraceEdgeAnyDirectionEdgeInEdgeOutIsMatchWhereSkipOffsetLimitOrderByDescUnionTrueFalseLiteralKeywordWhitespaceIntegerFloatUnquotedLDAPStringQuotedStringIdentifierHashIdentifierAtIdentifierComment"

var _TokenIDIndex = [...]uint16{0, 7, 11, 16, 27, 30, 36, 41, 46, 52, 57, 65, 79, 90, 107, 110, 112, 115, 118, 127, 135, 144, 150, 156, 164, 172, 178, 184, 200, 206, 213, 215, 220, 225, 229, 235, 240, 247, 251, 256, 260, 265, 272, 279, 289, 296, 301, 319, 331, 341, 355, 367, 374}

const _TokenIDLowerName = "invalidstarslashexclamationdotdotdotcommacolonequalstildelessthanlessthanequalsgreaterthangreaterthanequalsandorxornotbinaryandbinaryorbinarynotlparanrparanlbracketrbracketlbracerbraceedgeanydirectionedgeinedgeoutismatchwhereskipoffsetlimitorderbydescuniontruefalseliteralkeywordwhitespaceintegerfloatunquotedldapstringquotedstringidentifierhashidentifieratidentifiercomment"

func (i TokenID) String() string {
	if i < 0 || i >= TokenID(len(_TokenIDIndex)-1) {
		return fmt.Sprintf("TokenID(%d)", i)
	}
	return _TokenIDName[_TokenIDIndex[i]:_TokenIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TokenIDNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Star-(1)]
	_ = x[Slash-(2)]
	_ = x[Exclamation-(3)]
	_ = x[Dot-(4)]
	_ = x[Dotdot-(5)]
	_ = x[Comma-(6)]
	_ = x[Colon-(7)]
	_ = x[Equals-(8)]
	_ = x[Tilde-(9)]
	_ = x[LessThan-(10)]
	_ = x[LessThanEquals-(11)]
	_ = x[GreaterThan-(12)]
	_ = x[GreaterThanEquals-(13)]
	_ = x[And-(14)]
	_ = x[Or-(15)]
	_ = x[Xor-(16)]
	_ = x[Not-(17)]
	_ = x[BinaryAnd-(18)]
	_ = x[BinaryOr-(19)]
	_ = x[BinaryNot-(20)]
	_ = x[LParan-(21)]
	_ = x[RParan-(22)]
	_ = x[LBracket-(23)]
	_ = x[RBracket-(24)]
	_ = x[LBrace-(25)]
	_ = x[RBrace-(26)]
	_ = x[EdgeAnyDirection-(27)]
	_ = x[EdgeIn-(28)]
	_ = x[EdgeOut-(29)]
	_ = x[Is-(30)]
	_ = x[Match-(31)]
	_ = x[Where-(32)]
	_ = x[Skip-(33)]
	_ = x[Offset-(34)]
	_ = x[Limit-(35)]
	_ = x[OrderBy-(36)]
	_ = x[Desc-(37)]
	_ = x[Union-(38)]
	_ = x[True-(39)]
	_ = x[False-(40)]
	_ = x[Literal-(41)]
	_ = x[Keyword-(42)]
	_ = x[Whitespace-(43)]
	_ = x[Integer-(44)]
	_ = x[Float-(45)]
	_ = x[UnquotedLDAPString-(46)]
	_ = x[QuotedString-(47)]
	_ = x[Identifier-(48)]
	_ = x[HashIdentifier-(49)]
	_ = x[AtIdentifier-(50)]
	_ = x[Comment-(51)]
}

var _TokenIDValues = []TokenID{Invalid, Star, Slash, Exclamation, Dot, Dotdot, Comma, Colon, Equals, Tilde, LessThan, LessThanEquals, GreaterThan, GreaterThanEquals, And, Or, Xor, Not, BinaryAnd, BinaryOr, BinaryNot, LParan, RParan, LBracket, RBracket, LBrace, RBrace, EdgeAnyDirection, EdgeIn, EdgeOut, Is, Match, Where, Skip, Offset, Limit, OrderBy, Desc, Union, True, False, Literal, Keyword, Whitespace, Integer, Float, UnquotedLDAPString, QuotedString, Identifier, HashIdentifier, AtIdentifier, Comment}

var _TokenIDNameToValueMap = map[string]TokenID{
	_TokenIDName[0:7]:          Invalid,
	_TokenIDLowerName[0:7]:     Invalid,
	_TokenIDName[7:11]:         Star,
	_TokenIDLowerName[7:11]:    Star,
	_TokenIDName[11:16]:        Slash,
	_TokenIDLowerName[11:16]:   Slash,
	_TokenIDName[16:27]:        Exclamation,
	_TokenIDLowerName[16:27]:   Exclamation,
	_TokenIDName[27:30]:        Dot,
	_TokenIDLowerName[27:30]:   Dot,
	_TokenIDName[30:36]:        Dotdot,
	_TokenIDLowerName[30:36]:   Dotdot,
	_TokenIDName[36:41]:        Comma,
	_TokenIDLowerName[36:41]:   Comma,
	_TokenIDName[41:46]:        Colon,
	_TokenIDLowerName[41:46]:   Colon,
	_TokenIDName[46:52]:        Equals,
	_TokenIDLowerName[46:52]:   Equals,
	_TokenIDName[52:57]:        Tilde,
	_TokenIDLowerName[52:57]:   Tilde,
	_TokenIDName[57:65]:        LessThan,
	_TokenIDLowerName[57:65]:   LessThan,
	_TokenIDName[65:79]:        LessThanEquals,
	_TokenIDLowerName[65:79]:   LessThanEquals,
	_TokenIDName[79:90]:        GreaterThan,
	_TokenIDLowerName[79:90]:   GreaterThan,
	_TokenIDName[90:107]:       GreaterThanEquals,
	_TokenIDLowerName[90:107]:  GreaterThanEquals,
	_TokenIDName[107:110]:      And,
	_TokenIDLowerName[107:110]: And,
	_TokenIDName[110:112]:      Or,
	_TokenIDLowerName[110:112]: Or,
	_TokenIDName[112:115]:      Xor,
	_TokenIDLowerName[112:115]: Xor,
	_TokenIDName[115:118]:      Not,
	_TokenIDLowerName[115:118]: Not,
	_TokenIDName[118:127]:      BinaryAnd,
	_TokenIDLowerName[118:127]: BinaryAnd,
	_TokenIDName[127:135]:      BinaryOr,
	_TokenIDLowerName[127:135]: BinaryOr,
	_TokenIDName[135:144]:      BinaryNot,
	_TokenIDLowerName[135:144]: BinaryNot,
	_TokenIDName[144:150]:      LParan,
	_TokenIDLowerName[144:150]: LParan,
	_TokenIDName[150:156]:      RParan,
	_TokenIDLowerName[150:156]: RParan,
	_TokenIDName[156:164]:      LBracket,
	_TokenIDLowerName[156:164]: LBracket,
	_TokenIDName[164:172]:      RBracket,
	_TokenIDLowerName[164:172]: RBracket,
	_TokenIDName[172:178]:      LBrace,
	_TokenIDLowerName[172:178]: LBrace,
	_TokenIDName[178:184]:      RBrace,
	_TokenIDLowerName[178:184]: RBrace,
	_TokenIDName[184:200]:      EdgeAnyDirection,
	_TokenIDLowerName[184:200]: EdgeAnyDirection,
	_TokenIDName[200:206]:      EdgeIn,
	_TokenIDLowerName[200:206]: EdgeIn,
	_TokenIDName[206:213]:      EdgeOut,
	_TokenIDLowerName[206:213]: EdgeOut,
	_TokenIDName[213:215]:      Is,
	_TokenIDLowerName[213:215]: Is,
	_TokenIDName[215:220]:      Match,
	_TokenIDLowerName[215:220]: Match,
	_TokenIDName[220:225]:      Where,
	_TokenIDLowerName[220:225]: Where,
	_TokenIDName[225:229]:      Skip,
	_TokenIDLowerName[225:229]: Skip,
	_TokenIDName[229:235]:      Offset,
	_TokenIDLowerName[229:235]: Offset,
	_TokenIDName[235:240]:      Limit,
	_TokenIDLowerName[235:240]: Limit,
	_TokenIDName[240:247]:      OrderBy,
	_TokenIDLowerName[240:247]: OrderBy,
	_TokenIDName[247:251]:      Desc,
	_TokenIDLowerName[247:251]: Desc,
	_TokenIDName[251:256]:      Union,
	_TokenIDLowerName[251:256]: Union,
	_TokenIDName[256:260]:      True,
	_TokenIDLowerName[256:260]: True,
	_TokenIDName[260:265]:      False,
	_TokenIDLowerName[260:265]: False,
	_TokenIDName[265:272]:      Literal,
	_TokenIDLowerName[265:272]: Literal,
	_TokenIDName[272:279]:      Keyword,
	_TokenIDLowerName[272:279]: Keyword,
	_TokenIDName[279:289]:      Whitespace,
	_TokenIDLowerName[279:289]: Whitespace,
	_TokenIDName[289:296]:      Integer,
	_TokenIDLowerName[289:296]: Integer,
	_TokenIDName[296:301]:      Float,
	_TokenIDLowerName[296:301]: Float,
	_TokenIDName[301:319]:      UnquotedLDAPString,
	_TokenIDLowerName[301:319]: UnquotedLDAPString,
	_TokenIDName[319:331]:      QuotedString,
	_TokenIDLowerName[319:331]: QuotedString,
	_TokenIDName[331:341]:      Identifier,
	_TokenIDLowerName[331:341]: Identifier,
	_TokenIDName[341:355]:      HashIdentifier,
	_TokenIDLowerName[341:355]: HashIdentifier,
	_TokenIDName[355:367]:      AtIdentifier,
	_TokenIDLowerName[355:367]: AtIdentifier,
	_TokenIDName[367:374]:      Comment,
	_TokenIDLowerName[367:374]: Comment,
}

var _TokenIDNames = []string{
	_TokenIDName[0:7],
	_TokenIDName[7:11],
	_TokenIDName[11:16],
	_TokenIDName[16:27],
	_TokenIDName[27:30],
	_TokenIDName[30:36],
	_TokenIDName[36:41],
	_TokenIDName[41:46],
	_TokenIDName[46:52],
	_TokenIDName[52:57],
	_TokenIDName[57:65],
	_TokenIDName[65:79],
	_TokenIDName[79:90],
	_TokenIDName[90:107],
	_TokenIDName[107:110],
	_TokenIDName[110:112],
	_TokenIDName[112:115],
	_TokenIDName[115:118],
	_TokenIDName[118:127],
	_TokenIDName[127:135],
	_TokenIDName[135:144],
	_TokenIDName[144:150],
	_TokenIDName[150:156],
	_TokenIDName[156:164],
	_TokenIDName[164:172],
	_TokenIDName[172:178],
	_TokenIDName[178:184],
	_TokenIDName[184:200],
	_TokenIDName[200:206],
	_TokenIDName[206:213],
	_TokenIDName[213:215],
	_TokenIDName[215:220],
	_TokenIDName[220:225],
	_TokenIDName[225:229],
	_TokenIDName[229:235],
	_TokenIDName[235:240],
	_TokenIDName[240:247],
	_TokenIDName[247:251],
	_TokenIDName[251:256],
	_TokenIDName[256:260],
	_TokenIDName[260:265],
	_TokenIDName[265:272],
	_TokenIDName[272:279],
	_TokenIDName[279:289],
	_TokenIDName[289:296],
	_TokenIDName[296:301],
	_TokenIDName[301:319],
	_TokenIDName[319:331],
	_TokenIDName[331:341],
	_TokenIDName[341:355],
	_TokenIDName[355:367],
	_TokenIDName[367:374],
}

// TokenIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TokenIDString(s string) (TokenID, error) {
	if val, ok := _TokenIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TokenIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TokenID values", s)
}

// TokenIDValues returns all values of the enum
func TokenIDValues() []TokenID {
	return _TokenIDValues
}

// TokenIDStrings returns a slice of all String values of the enum
func TokenIDStrings() []string {
	strs := make([]string, len(_TokenIDNames))
	copy(strs, _TokenIDNames)
	return strs
}

// IsATokenID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TokenID) IsATokenID() bool {
	for _, v := range _TokenIDValues {
		if i == v {
			return true
		}
	}
	return false
}
