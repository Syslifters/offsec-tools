// Code generated by "enumer -trimprefix=Level -type=LogLevel -output loglevel_enums.go"; DO NOT EDIT.

package ui

import (
	"fmt"
	"strings"
)

const _LogLevelName = "TraceDebugInfoWarnErrorFatalPanic"

var _LogLevelIndex = [...]uint8{0, 5, 10, 14, 18, 23, 28, 33}

const _LogLevelLowerName = "tracedebuginfowarnerrorfatalpanic"

func (i LogLevel) String() string {
	if i < 0 || i >= LogLevel(len(_LogLevelIndex)-1) {
		return fmt.Sprintf("LogLevel(%d)", i)
	}
	return _LogLevelName[_LogLevelIndex[i]:_LogLevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LogLevelNoOp() {
	var x [1]struct{}
	_ = x[LevelTrace-(0)]
	_ = x[LevelDebug-(1)]
	_ = x[LevelInfo-(2)]
	_ = x[LevelWarn-(3)]
	_ = x[LevelError-(4)]
	_ = x[LevelFatal-(5)]
	_ = x[LevelPanic-(6)]
}

var _LogLevelValues = []LogLevel{LevelTrace, LevelDebug, LevelInfo, LevelWarn, LevelError, LevelFatal, LevelPanic}

var _LogLevelNameToValueMap = map[string]LogLevel{
	_LogLevelName[0:5]:        LevelTrace,
	_LogLevelLowerName[0:5]:   LevelTrace,
	_LogLevelName[5:10]:       LevelDebug,
	_LogLevelLowerName[5:10]:  LevelDebug,
	_LogLevelName[10:14]:      LevelInfo,
	_LogLevelLowerName[10:14]: LevelInfo,
	_LogLevelName[14:18]:      LevelWarn,
	_LogLevelLowerName[14:18]: LevelWarn,
	_LogLevelName[18:23]:      LevelError,
	_LogLevelLowerName[18:23]: LevelError,
	_LogLevelName[23:28]:      LevelFatal,
	_LogLevelLowerName[23:28]: LevelFatal,
	_LogLevelName[28:33]:      LevelPanic,
	_LogLevelLowerName[28:33]: LevelPanic,
}

var _LogLevelNames = []string{
	_LogLevelName[0:5],
	_LogLevelName[5:10],
	_LogLevelName[10:14],
	_LogLevelName[14:18],
	_LogLevelName[18:23],
	_LogLevelName[23:28],
	_LogLevelName[28:33],
}

// LogLevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LogLevelString(s string) (LogLevel, error) {
	if val, ok := _LogLevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LogLevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LogLevel values", s)
}

// LogLevelValues returns all values of the enum
func LogLevelValues() []LogLevel {
	return _LogLevelValues
}

// LogLevelStrings returns a slice of all String values of the enum
func LogLevelStrings() []string {
	strs := make([]string, len(_LogLevelNames))
	copy(strs, _LogLevelNames)
	return strs
}

// IsALogLevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LogLevel) IsALogLevel() bool {
	for _, v := range _LogLevelValues {
		if i == v {
			return true
		}
	}
	return false
}
