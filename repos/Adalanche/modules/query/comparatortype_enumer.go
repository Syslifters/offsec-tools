// Code generated by "enumer --type=ComparatorType"; DO NOT EDIT.

package query

import (
	"fmt"
	"strings"
)

const _ComparatorTypeName = "CompareInvalidCompareEqualsCompareLessThanCompareLessThanEqualCompareGreaterThanCompareGreaterThanEqual"

var _ComparatorTypeIndex = [...]uint8{0, 14, 27, 42, 62, 80, 103}

const _ComparatorTypeLowerName = "compareinvalidcompareequalscomparelessthancomparelessthanequalcomparegreaterthancomparegreaterthanequal"

func (i ComparatorType) String() string {
	if i >= ComparatorType(len(_ComparatorTypeIndex)-1) {
		return fmt.Sprintf("ComparatorType(%d)", i)
	}
	return _ComparatorTypeName[_ComparatorTypeIndex[i]:_ComparatorTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparatorTypeNoOp() {
	var x [1]struct{}
	_ = x[CompareInvalid-(0)]
	_ = x[CompareEquals-(1)]
	_ = x[CompareLessThan-(2)]
	_ = x[CompareLessThanEqual-(3)]
	_ = x[CompareGreaterThan-(4)]
	_ = x[CompareGreaterThanEqual-(5)]
}

var _ComparatorTypeValues = []ComparatorType{CompareInvalid, CompareEquals, CompareLessThan, CompareLessThanEqual, CompareGreaterThan, CompareGreaterThanEqual}

var _ComparatorTypeNameToValueMap = map[string]ComparatorType{
	_ComparatorTypeName[0:14]:        CompareInvalid,
	_ComparatorTypeLowerName[0:14]:   CompareInvalid,
	_ComparatorTypeName[14:27]:       CompareEquals,
	_ComparatorTypeLowerName[14:27]:  CompareEquals,
	_ComparatorTypeName[27:42]:       CompareLessThan,
	_ComparatorTypeLowerName[27:42]:  CompareLessThan,
	_ComparatorTypeName[42:62]:       CompareLessThanEqual,
	_ComparatorTypeLowerName[42:62]:  CompareLessThanEqual,
	_ComparatorTypeName[62:80]:       CompareGreaterThan,
	_ComparatorTypeLowerName[62:80]:  CompareGreaterThan,
	_ComparatorTypeName[80:103]:      CompareGreaterThanEqual,
	_ComparatorTypeLowerName[80:103]: CompareGreaterThanEqual,
}

var _ComparatorTypeNames = []string{
	_ComparatorTypeName[0:14],
	_ComparatorTypeName[14:27],
	_ComparatorTypeName[27:42],
	_ComparatorTypeName[42:62],
	_ComparatorTypeName[62:80],
	_ComparatorTypeName[80:103],
}

// ComparatorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparatorTypeString(s string) (ComparatorType, error) {
	if val, ok := _ComparatorTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparatorTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparatorType values", s)
}

// ComparatorTypeValues returns all values of the enum
func ComparatorTypeValues() []ComparatorType {
	return _ComparatorTypeValues
}

// ComparatorTypeStrings returns a slice of all String values of the enum
func ComparatorTypeStrings() []string {
	strs := make([]string, len(_ComparatorTypeNames))
	copy(strs, _ComparatorTypeNames)
	return strs
}

// IsAComparatorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparatorType) IsAComparatorType() bool {
	for _, v := range _ComparatorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
