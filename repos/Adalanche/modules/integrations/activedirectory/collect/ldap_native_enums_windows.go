// Code generated by "enumer -type=LDAPAuth -json -output ldap_enums.go"; DO NOT EDIT.

package collect

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_LDAPAuthName_0      = "LDAP_AUTH_SIMPLE"
	_LDAPAuthLowerName_0 = "ldap_auth_simple"
	_LDAPAuthName_1      = "LDAP_AUTH_SASL"
	_LDAPAuthLowerName_1 = "ldap_auth_sasl"
	_LDAPAuthName_2      = "LDAP_AUTH_OTHERKIND"
	_LDAPAuthLowerName_2 = "ldap_auth_otherkind"
	_LDAPAuthName_3      = "LDAP_AUTH_NEGOTIATE"
	_LDAPAuthLowerName_3 = "ldap_auth_negotiate"
	_LDAPAuthName_4      = "LDAP_AUTH_MSN"
	_LDAPAuthLowerName_4 = "ldap_auth_msn"
	_LDAPAuthName_5      = "LDAP_AUTH_NTLM"
	_LDAPAuthLowerName_5 = "ldap_auth_ntlm"
	_LDAPAuthName_6      = "LDAP_AUTH_DPA"
	_LDAPAuthLowerName_6 = "ldap_auth_dpa"
	_LDAPAuthName_7      = "LDAP_AUTH_DIGEST"
	_LDAPAuthLowerName_7 = "ldap_auth_digest"
)

var (
	_LDAPAuthIndex_0 = [...]uint8{0, 16}
	_LDAPAuthIndex_1 = [...]uint8{0, 14}
	_LDAPAuthIndex_2 = [...]uint8{0, 19}
	_LDAPAuthIndex_3 = [...]uint8{0, 19}
	_LDAPAuthIndex_4 = [...]uint8{0, 13}
	_LDAPAuthIndex_5 = [...]uint8{0, 14}
	_LDAPAuthIndex_6 = [...]uint8{0, 13}
	_LDAPAuthIndex_7 = [...]uint8{0, 16}
)

func (i LDAPAuth) String() string {
	switch {
	case i == 128:
		return _LDAPAuthName_0
	case i == 131:
		return _LDAPAuthName_1
	case i == 134:
		return _LDAPAuthName_2
	case i == 1158:
		return _LDAPAuthName_3
	case i == 2182:
		return _LDAPAuthName_4
	case i == 4230:
		return _LDAPAuthName_5
	case i == 8326:
		return _LDAPAuthName_6
	case i == 16518:
		return _LDAPAuthName_7
	default:
		return fmt.Sprintf("LDAPAuth(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LDAPAuthNoOp() {
	var x [1]struct{}
	_ = x[LDAP_AUTH_SIMPLE-(128)]
	_ = x[LDAP_AUTH_SASL-(131)]
	_ = x[LDAP_AUTH_OTHERKIND-(134)]
	_ = x[LDAP_AUTH_NEGOTIATE-(1158)]
	_ = x[LDAP_AUTH_MSN-(2182)]
	_ = x[LDAP_AUTH_NTLM-(4230)]
	_ = x[LDAP_AUTH_DPA-(8326)]
	_ = x[LDAP_AUTH_DIGEST-(16518)]
}

var _LDAPAuthValues = []LDAPAuth{LDAP_AUTH_SIMPLE, LDAP_AUTH_SASL, LDAP_AUTH_OTHERKIND, LDAP_AUTH_NEGOTIATE, LDAP_AUTH_MSN, LDAP_AUTH_NTLM, LDAP_AUTH_DPA, LDAP_AUTH_DIGEST}

var _LDAPAuthNameToValueMap = map[string]LDAPAuth{
	_LDAPAuthName_0[0:16]:      LDAP_AUTH_SIMPLE,
	_LDAPAuthLowerName_0[0:16]: LDAP_AUTH_SIMPLE,
	_LDAPAuthName_1[0:14]:      LDAP_AUTH_SASL,
	_LDAPAuthLowerName_1[0:14]: LDAP_AUTH_SASL,
	_LDAPAuthName_2[0:19]:      LDAP_AUTH_OTHERKIND,
	_LDAPAuthLowerName_2[0:19]: LDAP_AUTH_OTHERKIND,
	_LDAPAuthName_3[0:19]:      LDAP_AUTH_NEGOTIATE,
	_LDAPAuthLowerName_3[0:19]: LDAP_AUTH_NEGOTIATE,
	_LDAPAuthName_4[0:13]:      LDAP_AUTH_MSN,
	_LDAPAuthLowerName_4[0:13]: LDAP_AUTH_MSN,
	_LDAPAuthName_5[0:14]:      LDAP_AUTH_NTLM,
	_LDAPAuthLowerName_5[0:14]: LDAP_AUTH_NTLM,
	_LDAPAuthName_6[0:13]:      LDAP_AUTH_DPA,
	_LDAPAuthLowerName_6[0:13]: LDAP_AUTH_DPA,
	_LDAPAuthName_7[0:16]:      LDAP_AUTH_DIGEST,
	_LDAPAuthLowerName_7[0:16]: LDAP_AUTH_DIGEST,
}

var _LDAPAuthNames = []string{
	_LDAPAuthName_0[0:16],
	_LDAPAuthName_1[0:14],
	_LDAPAuthName_2[0:19],
	_LDAPAuthName_3[0:19],
	_LDAPAuthName_4[0:13],
	_LDAPAuthName_5[0:14],
	_LDAPAuthName_6[0:13],
	_LDAPAuthName_7[0:16],
}

// LDAPAuthString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LDAPAuthString(s string) (LDAPAuth, error) {
	if val, ok := _LDAPAuthNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LDAPAuthNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to LDAPAuth values", s)
}

// LDAPAuthValues returns all values of the enum
func LDAPAuthValues() []LDAPAuth {
	return _LDAPAuthValues
}

// LDAPAuthStrings returns a slice of all String values of the enum
func LDAPAuthStrings() []string {
	strs := make([]string, len(_LDAPAuthNames))
	copy(strs, _LDAPAuthNames)
	return strs
}

// IsALDAPAuth returns "true" if the value is listed in the enum definition. "false" otherwise
func (i LDAPAuth) IsALDAPAuth() bool {
	for _, v := range _LDAPAuthValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for LDAPAuth
func (i LDAPAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for LDAPAuth
func (i *LDAPAuth) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LDAPAuth should be a string, got %s", data)
	}

	var err error
	*i, err = LDAPAuthString(s)
	return err
}
