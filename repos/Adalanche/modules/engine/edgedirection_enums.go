// Code generated by "enumer -type=EdgeDirection -output edgedirection_enums.go -json"; DO NOT EDIT.

package engine

import (
	"encoding/json"
	"fmt"
	"strings"
)

const (
	_EdgeDirectionName_0      = "OutIn"
	_EdgeDirectionLowerName_0 = "outin"
	_EdgeDirectionName_1      = "Any"
	_EdgeDirectionLowerName_1 = "any"
)

var (
	_EdgeDirectionIndex_0 = [...]uint8{0, 3, 5}
	_EdgeDirectionIndex_1 = [...]uint8{0, 3}
)

func (i EdgeDirection) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _EdgeDirectionName_0[_EdgeDirectionIndex_0[i]:_EdgeDirectionIndex_0[i+1]]
	case i == 9:
		return _EdgeDirectionName_1
	default:
		return fmt.Sprintf("EdgeDirection(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EdgeDirectionNoOp() {
	var x [1]struct{}
	_ = x[Out-(0)]
	_ = x[In-(1)]
	_ = x[Any-(9)]
}

var _EdgeDirectionValues = []EdgeDirection{Out, In, Any}

var _EdgeDirectionNameToValueMap = map[string]EdgeDirection{
	_EdgeDirectionName_0[0:3]:      Out,
	_EdgeDirectionLowerName_0[0:3]: Out,
	_EdgeDirectionName_0[3:5]:      In,
	_EdgeDirectionLowerName_0[3:5]: In,
	_EdgeDirectionName_1[0:3]:      Any,
	_EdgeDirectionLowerName_1[0:3]: Any,
}

var _EdgeDirectionNames = []string{
	_EdgeDirectionName_0[0:3],
	_EdgeDirectionName_0[3:5],
	_EdgeDirectionName_1[0:3],
}

// EdgeDirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EdgeDirectionString(s string) (EdgeDirection, error) {
	if val, ok := _EdgeDirectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EdgeDirectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EdgeDirection values", s)
}

// EdgeDirectionValues returns all values of the enum
func EdgeDirectionValues() []EdgeDirection {
	return _EdgeDirectionValues
}

// EdgeDirectionStrings returns a slice of all String values of the enum
func EdgeDirectionStrings() []string {
	strs := make([]string, len(_EdgeDirectionNames))
	copy(strs, _EdgeDirectionNames)
	return strs
}

// IsAEdgeDirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EdgeDirection) IsAEdgeDirection() bool {
	for _, v := range _EdgeDirectionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for EdgeDirection
func (i EdgeDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for EdgeDirection
func (i *EdgeDirection) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("EdgeDirection should be a string, got %s", data)
	}

	var err error
	*i, err = EdgeDirectionString(s)
	return err
}
